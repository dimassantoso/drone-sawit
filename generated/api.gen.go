// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// EstateDronePlanResponse defines model for EstateDronePlanResponse.
type EstateDronePlanResponse struct {
	Distance int `json:"distance"`
	Rest     *struct {
		X int `json:"x"`
		Y int `json:"y"`
	} `json:"rest,omitempty"`
}

// EstateRequest defines model for EstateRequest.
type EstateRequest struct {
	Length int `json:"length"`
	Width  int `json:"width"`
}

// EstateResponse defines model for EstateResponse.
type EstateResponse struct {
	Id string `json:"id"`
}

// EstateStatsResponse defines model for EstateStatsResponse.
type EstateStatsResponse struct {
	Count  int     `json:"count"`
	Max    int     `json:"max"`
	Median float32 `json:"median"`
	Min    int     `json:"min"`
}

// EstateTreeRequest defines model for EstateTreeRequest.
type EstateTreeRequest struct {
	Height int `json:"height"`
	X      int `json:"x"`
	Y      int `json:"y"`
}

// EstateTreeResponse defines model for EstateTreeResponse.
type EstateTreeResponse struct {
	Id string `json:"id"`
}

// GetEstateIdDronePlanParams defines parameters for GetEstateIdDronePlan.
type GetEstateIdDronePlanParams struct {
	MaxDistance *int `form:"max_distance,omitempty" json:"max_distance,omitempty"`
}

// PostEstateJSONRequestBody defines body for PostEstate for application/json ContentType.
type PostEstateJSONRequestBody = EstateRequest

// PostEstateIdTreeJSONRequestBody defines body for PostEstateIdTree for application/json ContentType.
type PostEstateIdTreeJSONRequestBody = EstateTreeRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create New Estate
	// (POST /estate)
	PostEstate(ctx echo.Context) error
	// Get dron plan for the estate
	// (GET /estate/{id}/drone-plan)
	GetEstateIdDronePlan(ctx echo.Context, id string, params GetEstateIdDronePlanParams) error
	// Get stats of estate
	// (GET /estate/{id}/stats)
	GetEstateIdStats(ctx echo.Context, id string) error
	// Create New Estate Tree
	// (POST /estate/{id}/tree)
	PostEstateIdTree(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostEstate converts echo context to params.
func (w *ServerInterfaceWrapper) PostEstate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEstate(ctx)
	return err
}

// GetEstateIdDronePlan converts echo context to params.
func (w *ServerInterfaceWrapper) GetEstateIdDronePlan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEstateIdDronePlanParams
	// ------------- Optional query parameter "max_distance" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_distance", ctx.QueryParams(), &params.MaxDistance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_distance: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEstateIdDronePlan(ctx, id, params)
	return err
}

// GetEstateIdStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetEstateIdStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEstateIdStats(ctx, id)
	return err
}

// PostEstateIdTree converts echo context to params.
func (w *ServerInterfaceWrapper) PostEstateIdTree(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEstateIdTree(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/estate", wrapper.PostEstate)
	router.GET(baseURL+"/estate/:id/drone-plan", wrapper.GetEstateIdDronePlan)
	router.GET(baseURL+"/estate/:id/stats", wrapper.GetEstateIdStats)
	router.POST(baseURL+"/estate/:id/tree", wrapper.PostEstateIdTree)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTW/rNhD8K8K2R/lJ/oiLp+Nr08CHBkGSWxAUtLi2GEikQq4SG4b/e0FStiNbihPU",
	"bvNusrVczuwMOVpBqopSSZRkIFmBSTMsmHu81FrpWzSlkgbtH6VWJWoS6F4XaAybuxe0LBESMKSFnMN6",
	"HYLG50po5JA8bAsfw02hmj5hSrAO4dIQI/xDK4k3OZPdu3FhiMnUvcEFK8ocIRnE8bankIRz1OA2N3TY",
	"YdFY2m9buDxWssdsAXbNIa+9si327gnc4nPVijpHOaesiSsOoWALUVQFJBdxbIdQCOl/t/J6Ffxf9thj",
	"VKPadH6PV5eggjcAAUvH32cjPu6xcTrujS5Gv/Wm/cH3HhumQzaexhcsnkF4xGqCv4PljhiZbkCpqiQ1",
	"MLWaq2CLDxQhF0x21MmqmNZlQh7rtUfQg/Qo/PrtZt3E7zV2GyxDMc+avIdvzTE86q7FobPerV9+qr71",
	"yIUb2MdIf9J9feu+wUndZ4uEnCl3mEWKNRzJClv11+TeQiZBDoa7CHt37FVYkV9QG6EkJND/Fn+LbaEq",
	"UbJSQAJD91cIJaPMUYrQ8XZclVfaMmYklJxwSOBGGfKzAY8bDf1QfOnNLwm9/VlZ5iJ1y6Ino+QuFezT",
	"rxpnkMAv0S42ojozouZVtm6Oh3SF/m52kjjIg7h/8s1rxd3uHE2qRUl+iL4iSDUyQh6YKk3RmFmV50s7",
	"2lEcnw5MIzpbsPxgPNDbQYVgqqJgegkJ/O7gBdf4GtRi2fe1uNFK8HXEnUvK3N8wc2zR+gprqSd8G67O",
	"LJoVSKgNJA8rsNePMxCEG0MKDvuqhW9IHxyAuslzhXq561Kwxd/b1GtZvzvdjweWiE9sicOPixY97rwZ",
	"vA9G/50PrhUFf6pK8j0XXCEFVubAqhzMlA4owwA7DGEfzUe84CLwHD44v4zN9P5JJHTCBGrWqRxp/NCN",
	"PeE2z86m3Lmy4O2Xx/+SB42vgO5MsGVfMBi+iJMPIsnNy3cwqF82Zqx0DglkRGUSRblKWZ5ZW68f1/8E",
	"AAD//42WkrxmDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
