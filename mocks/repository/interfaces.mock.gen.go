// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	repository "github.com/dimassantoso/drone-sawit/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CountEstateTree mocks base method.
func (m *MockRepositoryInterface) CountEstateTree(ctx context.Context, filter *repository.FilterEstateTree) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEstateTree", ctx, filter)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountEstateTree indicates an expected call of CountEstateTree.
func (mr *MockRepositoryInterfaceMockRecorder) CountEstateTree(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEstateTree", reflect.TypeOf((*MockRepositoryInterface)(nil).CountEstateTree), ctx, filter)
}

// CreateEstate mocks base method.
func (m *MockRepositoryInterface) CreateEstate(ctx context.Context, data *repository.Estate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstate", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEstate indicates an expected call of CreateEstate.
func (mr *MockRepositoryInterfaceMockRecorder) CreateEstate(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateEstate), ctx, data)
}

// CreateEstateTree mocks base method.
func (m *MockRepositoryInterface) CreateEstateTree(ctx context.Context, data *repository.EstateTree) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstateTree", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEstateTree indicates an expected call of CreateEstateTree.
func (mr *MockRepositoryInterfaceMockRecorder) CreateEstateTree(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstateTree", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateEstateTree), ctx, data)
}

// FindAllMapEstateTree mocks base method.
func (m *MockRepositoryInterface) FindAllMapEstateTree(ctx context.Context, filter *repository.FilterEstateTree) (map[repository.CoordinatePoint]repository.EstateTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMapEstateTree", ctx, filter)
	ret0, _ := ret[0].(map[repository.CoordinatePoint]repository.EstateTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMapEstateTree indicates an expected call of FindAllMapEstateTree.
func (mr *MockRepositoryInterfaceMockRecorder) FindAllMapEstateTree(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMapEstateTree", reflect.TypeOf((*MockRepositoryInterface)(nil).FindAllMapEstateTree), ctx, filter)
}

// FindEstate mocks base method.
func (m *MockRepositoryInterface) FindEstate(ctx context.Context, filter *repository.FilterEstate) (repository.Estate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEstate", ctx, filter)
	ret0, _ := ret[0].(repository.Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEstate indicates an expected call of FindEstate.
func (mr *MockRepositoryInterfaceMockRecorder) FindEstate(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).FindEstate), ctx, filter)
}

// FindEstateTree mocks base method.
func (m *MockRepositoryInterface) FindEstateTree(ctx context.Context, filter *repository.FilterEstateTree) (repository.EstateTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEstateTree", ctx, filter)
	ret0, _ := ret[0].(repository.EstateTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEstateTree indicates an expected call of FindEstateTree.
func (mr *MockRepositoryInterfaceMockRecorder) FindEstateTree(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEstateTree", reflect.TypeOf((*MockRepositoryInterface)(nil).FindEstateTree), ctx, filter)
}

// GetEstateTreeStats mocks base method.
func (m *MockRepositoryInterface) GetEstateTreeStats(ctx context.Context, filter *repository.FilterEstateTree) (repository.EstateTreeStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstateTreeStats", ctx, filter)
	ret0, _ := ret[0].(repository.EstateTreeStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEstateTreeStats indicates an expected call of GetEstateTreeStats.
func (mr *MockRepositoryInterfaceMockRecorder) GetEstateTreeStats(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstateTreeStats", reflect.TypeOf((*MockRepositoryInterface)(nil).GetEstateTreeStats), ctx, filter)
}
